<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KuangjuX</title>
    <link>http://www.example.com/</link>
    <description>Recent content on KuangjuX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 May 2022 23:17:39 +0800</lastBuildDate><atom:link href="http://www.example.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello</title>
      <link>http://www.example.com/posts/hello/</link>
      <pubDate>Thu, 26 May 2022 23:17:39 +0800</pubDate>
      
      <guid>http://www.example.com/posts/hello/</guid>
      <description>Hello</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Networking</title>
      <link>http://www.example.com/posts/6-s081-net/</link>
      <pubDate>Fri, 04 Feb 2022 14:48:18 +0000</pubDate>
      
      <guid>http://www.example.com/posts/6-s081-net/</guid>
      <description>在本次实验中我们需要自己去实现网卡驱动和网络套接字，在写网卡驱动前我们需要知道网卡收发包的工作原理，再看了文档和查阅了一些资料之后总结了一下。
网卡接收与传输由这张图我们可以梳理下关于网卡收发包的细节，首先内核需要分配 rx_ring 和 tx_ring 两块环形缓冲区的内存用来接收和发送报文。其中以太网控制器的寄存器记录了关于 rx_ring 和 tx_ring 的详细信息。接收 packet 的细节如下：
 内核首先在主存中分配内存缓冲区和环形缓冲区，并由 CPU 将 rx_ring 的详细信息写入以太网控制器 随后 NIC (Network Interface Card) 通过 DMA 获取到下一个可以写入的缓冲区的地址，当 packet 从硬件收到的时候外设通过 DMA 的方式写入对应的内存地址中 当写入内存地址后，硬件将会向 CPU 发生中断，操作系统检测到中断后会调用网卡的异常处理函数 异常处理函数可以通过由以太网控制寄存器映射到操作系统上的内存地址访问寄存器获取到下一个收到但未处理的 packet 的描述符，根据该描述符可以找到对应的缓冲区地址进行读取并传输给上层协议。  由这张图可以看出软硬件在接收到 packet 的时候是如何工作的，首先硬件通过 DMA 拿到了 Head 所在 rx_ring 描述符的内存地址，并获取到其缓冲区地址，然后将收到的 packet 通过 DMA 拷贝到内存中，随后更新 rx_ring 描述符的内容并向寄存器中写入 HEAD 的新位置，随后向操作系统发出中断，操作系统收到中断通过获取 Tail 所在位置的文件描述符的信息来获取下一个将要处理的 packet，处理后由软件而非硬件更新 Tail 的位置。
所以我们可以按照以下逻辑写一下网卡收包与发包的过程：
int e1000_transmit(struct mbuf *m) { // // Your code here.</description>
    </item>
    
    <item>
      <title>2021年终总结</title>
      <link>http://www.example.com/posts/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 11 Jan 2022 15:37:32 +0000</pubDate>
      
      <guid>http://www.example.com/posts/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <description>好像之前从来没有写过年终总结，这次主要是上网看到了很多人都写了年终总结的博客，于是趁着疫情隔离在家写一下去年的年终总结。
今年应该是我技术进步最大的一年，由于上大学前从来没学过计算机，从之前只会写一些 Web，连基础数据结构都写不利索，碰到一些比较难的东西就直接不会了，要不然就直接放弃，要不然就简单进行一个代码的抄。在今年的时候我已经使用 Rust 写了一个操作系统（虽然一堆 bug），一个简单的五级流水的 CPU（照书抄），一个简单的 TCP/IP 协议栈（参考 Linux），完成了半个 Raft 协议（MIT 6.824 课程，小学期大作业完成得早开始做的，后来没时间就鸽了），半个 DBMS（CMU 15-445，目前在做，已经做到 Hash Join Executor 了）。目前我对于系统软件和硬件已经具有了最基本的了解，大概不会像去年那样面对大作业的无力感了。
随之而来的则是各种焦虑，由于我大一大二时本身对于加权分数就不怎么看重，而且有几门学分很高的课，虽然当时我已经好好准备了，但依然拿到了比较低的分，干脆之后就更放飞了自我，于是学分绩就更难看了。然而大一大二一直不太在乎，到大三看到了上一届的保研名单突然急剧焦虑了起来，于是一直纠结是要工作还是读研，虽然毕业直接工作对我来说相对是比较简单的，但自己总是有些不甘心；但是读研按我的学分绩就只能考了，考研又是一个十分痛苦的过程，备战期有接近一年的时间，相当于再一次准备高考，而且没有人监督，完全凭自己的意志力了（而我意志力又很差）。挣扎了一段时间后还是选择了考研拼一把，一方面是确实对做系统比较感兴趣，想尝试一下自己是否适合科研（大概率不适合），如果不适合就读完直接润了；另一方面是想提升一下自己的实力，毕竟现在计算机行业越来越卷了，找工作也对学历要求水涨船高。
于是之后就开始考虑自己读研应该去哪，之前本来想去 sjtu，不过发现 sjtu 考研实在是太卷了，以我的应试水平大概是连初试线都摸不到，于是直接被我 pass 掉了，于是之后问了问几个学长和老师，目前先把考研目标暂定在中科院计算所和南京大学了。
其次是对自己的能力的质疑，虽然感觉自己的工程能力在学校里算不错，自己也取得了一些成绩，但是在看神仙们的朋友圈和 github 时感觉自己水平 low 的一批，全方位被花式吊打。在 Debug 的时候也一直递归怀疑自己的智商，并且时常处于放弃的边缘。一面对于自己的水平有些自信，一面又被不断地 &amp;ldquo;PUA&amp;rdquo;，这让我对自己的能力产生了错觉。不过后来想了想，自己的能力其实一直没变，只不过朋友圈大佬太多，给了我一种能和他们平起平坐的错觉，其实我该做不出来的还是做不出来&amp;hellip;&amp;hellip; 对我来说最重要的还是放平心态打好技术基础，不去好高骛远做一些听起来很高级的东西（其实我水平完全达不到）。
在这一年里，我参加了一些比赛，认识很多志同道合的人，他们给了我很多的帮助，也让我明白了很多事情，这是我一年来最大的收获。生活并不总是顺遂的，有许多困难和麻烦，但只要坚持自己想做的事情，尽人事就可以了。</description>
    </item>
    
  </channel>
</rss>
